// src/screens/PDFPreviewScreen.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  ActivityIndicator,
  ScrollView,
  Platform
} from 'react-native';
import { useRoute, useNavigation } from '@react-navigation/native';
import EnhancedHeader from '../components/EnhancedHeader';
import { Colors, Typography, Spacing, BorderRadius, Shadows } from '../styles';
import * as FileSystem from 'expo-file-system';
import { isWeb } from '../utils/platform';

// For web PDF generation - you'll need to install this package:
// npm install jspdf --save
import jsPDF from 'jspdf';

const PDFPreviewScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { documentId, formData, reviewerName, reviewDate } = route.params;
  
  const [loading, setLoading] = useState(true);
  const [pdfUrl, setPdfUrl] = useState(null);
  const [generatingPdf, setGeneratingPdf] = useState(false);
  
  // Generate PDF preview on mount
  useEffect(() => {
    const generatePdfPreview = async () => {
      try {
        setLoading(true);
        
        // Web uses different PDF rendering than native
        if (isWeb) {
          await generateWebPdfPreview();
        } else {
          // For native, we'd implement a different approach
          // This is a placeholder
          setTimeout(() => {
            setLoading(false);
          }, 1000);
        }
      } catch (error) {
        console.error('Error generating PDF preview:', error);
        setLoading(false);
      }
    };
    
    generatePdfPreview();
  }, []);
  
  // Web-specific PDF generation
  const generateWebPdfPreview = async () => {
    try {
      // Create a new jsPDF instance
      const doc = new jsPDF();
      
      // Add logo (assuming you have a logo file)
      // doc.addImage(logoBase64, 'PNG', 15, 15, 30, 30);
      
      // Set font and add title
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('Medical Document Review Report', 15, 30);
      
      // Add review info
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Reviewed by: ${reviewerName}`, 15, 45);
      doc.text(`Review Date: ${new Date(reviewDate).toLocaleDateString()}`, 15, 52);
      
      // Format and add each field
      let y = 70;
      const addField = (label, value) => {
        if (!value || value.trim() === '') return;
        
        // Handle line breaks for long values
        const valuePieces = doc.splitTextToSize(value, 180);
        
        doc.setFont('helvetica', 'bold');
        doc.text(`${label}:`, 15, y);
        doc.setFont('helvetica', 'normal');
        doc.text(valuePieces, 15, y + 7);
        
        y += 7 + (valuePieces.length * 7) + 5;
        
        // Add a thin line between sections
        if (y < 250) {
          doc.setDrawColor(220, 220, 220);
          doc.line(15, y - 2, 195, y - 2);
        }
      };
      
      // Add clinical fields
      addField('Insurance', formData.insurance);
      addField('Location', formData.location);
      addField('Diagnosis (Dx)', formData.dx);
      addField('Primary Care Provider (PCP)', formData.pcp);
      addField('Discharge (DC)', formData.dc);
      addField('Wounds', formData.wounds);
      addField('Antibiotics', formData.antibiotics);
      addField('Cardiac Drips', formData.cardiacDrips);
      addField('Labs', formData.labs);
      addField('Face to Face', formData.faceToFace);
      addField('History', formData.history);
      addField('Mental Health State', formData.mentalHealthState);
      addField('Additional Comments', formData.additionalComments);
      
      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text(`Page ${i} of ${pageCount}`, 15, 285);
        doc.text('Generated by MedRec App', 150, 285);
      }
      
      // Get the PDF data URL for preview
      const pdfDataUrl = doc.output('dataurlstring');
      setPdfUrl(pdfDataUrl);
      setLoading(false);
    } catch (error) {
      console.error('Error generating PDF preview:', error);
      setLoading(false);
    }
  };
  
  // Download the PDF
  const downloadPdf = async () => {
    try {
      setGeneratingPdf(true);
      
      if (isWeb) {
        // For web, create and trigger download link
        const link = document.createElement('a');
        link.href = pdfUrl;
        link.download = `medical_review_${new Date().toISOString().slice(0, 10)}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } else {
        // For native, save to FileSystem
        // This is a placeholder - would need proper implementation
        const fileUri = `${FileSystem.documentDirectory}medical_review_${new Date().toISOString().slice(0, 10)}.pdf`;
        await FileSystem.writeAsStringAsync(fileUri, pdfUrl, { encoding: FileSystem.EncodingType.Base64 });
        
        // Show success message
        Alert.alert('Success', `PDF saved to ${fileUri}`);
      }
      
      setGeneratingPdf(false);
      
      // Navigate to document list after successful download
      navigation.navigate('DocumentList');
    } catch (error) {
      console.error('Error downloading PDF:', error);
      setGeneratingPdf(false);
      Alert.alert('Error', 'Failed to download PDF');
    }
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <EnhancedHeader
        title="PDF Preview"
        showBackButton={true}
      />
      
      <View style={styles.content}>
        {loading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={Colors.primary} />
            <Text style={styles.loadingText}>Generating PDF preview...</Text>
          </View>
        ) : (
          <>
            <View style={styles.previewHeader}>
              <Text style={styles.previewTitle}>Review Report Preview</Text>
              <Text style={styles.previewDescription}>
                Preview your report before downloading. Click the button below to save the PDF to your device.
              </Text>
            </View>
            
            {isWeb && pdfUrl ? (
              <iframe
                src={pdfUrl}
                style={{
                  width: '100%',
                  height: 500,
                  border: '1px solid #ddd',
                  borderRadius: 8,
                }}
                title="PDF Preview"
              />
            ) : (
              <ScrollView style={styles.previewContainer}>
                <View style={styles.previewContent}>
                  <Text style={styles.reportTitle}>Medical Document Review Report</Text>
                  <Text style={styles.reviewerInfo}>Reviewed by: {reviewerName}</Text>
                  <Text style={styles.reviewerInfo}>
                    Review Date: {new Date(reviewDate).toLocaleDateString()}
                  </Text>
                  
                  {/* Preview content - simplified version of what will be in PDF */}
                  {Object.entries(formData).map(([field, value]) => {
                    // Skip metadata fields
                    if (field.startsWith('_') || 
                        field === 'extractionMethod' || 
                        field === 'extractionDate' ||
                        !value || 
                        value.trim() === '') {
                      return null;
                    }
                    
                    // Format field label from camelCase
                    const formatLabel = (camelCase) => {
                      if (camelCase === 'dx') return 'Diagnosis (Dx)';
                      if (camelCase === 'pcp') return 'Primary Care Provider (PCP)';
                      if (camelCase === 'dc') return 'Discharge (DC)';
                      
                      return camelCase
                        .replace(/([A-Z])/g, ' $1')
                        .replace(/^./, str => str.toUpperCase());
                    };
                    
                    return (
                      <View key={field} style={styles.fieldPreview}>
                        <Text style={styles.fieldLabel}>
                          {formatLabel(field)}:
                        </Text>
                        <Text style={styles.fieldValue}>{value}</Text>
                      </View>
                    );
                  })}
                </View>
              </ScrollView>
            )}
            
            <TouchableOpacity
              style={[
                styles.downloadButton,
                generatingPdf && styles.disabledButton
              ]}
              onPress={downloadPdf}
              disabled={generatingPdf}
            >
              {generatingPdf ? (
                <ActivityIndicator color={Colors.white} size="small" />
              ) : (
                <Text style={styles.downloadButtonText}>
                  Download PDF Report
                </Text>
              )}
            </TouchableOpacity>
          </>
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.lightGray,
  },
  content: {
    flex: 1,
    padding: Spacing.large,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: Spacing.medium,
    fontSize: Typography.size.medium,
    color: Colors.gray,
  },
  previewHeader: {
    marginBottom: Spacing.large,
  },
  previewTitle: {
    fontSize: Typography.size.xlarge,
    fontWeight: Typography.weight.bold,
    color: Colors.black,
    marginBottom: Spacing.small,
  },
  previewDescription: {
    fontSize: Typography.size.medium,
    color: Colors.gray,
  },
  previewContainer: {
    flex: 1,
    backgroundColor: Colors.white,
    borderRadius: BorderRadius.medium,
    marginBottom: Spacing.large,
    ...Shadows.medium,
  },
  previewContent: {
    padding: Spacing.large,
  },
  reportTitle: {
    fontSize: Typography.size.xlarge,
    fontWeight: Typography.weight.bold,
    color: Colors.black,
    marginBottom: Spacing.medium,
  },
  reviewerInfo: {
    fontSize: Typography.size.medium,
    color: Colors.gray,
    marginBottom: Spacing.small,
  },
  fieldPreview: {
    marginBottom: Spacing.large,
    paddingBottom: Spacing.medium,
    borderBottomWidth: 1,
    borderBottomColor: Colors.lightGray,
  },
  fieldLabel: {
    fontSize: Typography.size.medium,
    fontWeight: Typography.weight.semibold,
    color: Colors.black,
    marginBottom: Spacing.small,
  },
  fieldValue: {
    fontSize: Typography.size.medium,
    color: Colors.black,
  },
  downloadButton: {
    backgroundColor: Colors.primary,
    borderRadius: BorderRadius.medium,
    padding: Spacing.medium,
    alignItems: 'center',
    ...Shadows.medium,
  },
  downloadButtonText: {
    color: Colors.white,
    fontSize: Typography.size.medium,
    fontWeight: Typography.weight.semibold,
  },
  disabledButton: {
    backgroundColor: Colors.gray,
    opacity: 0.7,
  },
});

export default PDFPreviewScreen;